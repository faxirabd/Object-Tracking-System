
at90canServo_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000093  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000021f  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000014b  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000034b  00000000  00000000  00000779  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000128  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d6  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e0       	ldi	r30, 0x08	; 8
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 30       	cpi	r26, 0x00	; 0
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 00 01 	call	0x200	; 0x200 <main>
  be:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <uartinit0>:
#define F_CPU 8000000L

void uartinit0(unsigned long baudrate)
{
  c6:	9b 01       	movw	r18, r22
  c8:	ac 01       	movw	r20, r24
	baudrate=(F_CPU/(baudrate*16) )-1;
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	44 1f       	adc	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	d1 f7       	brne	.-12     	; 0xcc <uartinit0+0x6>
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	72 e1       	ldi	r23, 0x12	; 18
  dc:	8a e7       	ldi	r24, 0x7A	; 122
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__udivmodsi4>
  e4:	c9 01       	movw	r24, r18
  e6:	da 01       	movw	r26, r20
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	a1 09       	sbc	r26, r1
  ec:	b1 09       	sbc	r27, r1

	UBRR0H=baudrate >> 8;
  ee:	29 2f       	mov	r18, r25
  f0:	3a 2f       	mov	r19, r26
  f2:	4b 2f       	mov	r20, r27
  f4:	55 27       	eor	r21, r21
  f6:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L=baudrate;
  fa:	80 93 c4 00 	sts	0x00C4, r24

	//Sender, Empfänger aktivieren
	UCSR0B |= (1 << TXEN);	//Sender aktivieren
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN);	//Empfänger aktivieren
 108:	80 81       	ld	r24, Z
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	80 83       	st	Z, r24
}
 10e:	08 95       	ret

00000110 <uartinit1>:

void uartinit1(unsigned long baudrate)
{
 110:	9b 01       	movw	r18, r22
 112:	ac 01       	movw	r20, r24
	baudrate=(F_CPU/(baudrate*16) )-1;
 114:	e4 e0       	ldi	r30, 0x04	; 4
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	ea 95       	dec	r30
 120:	d1 f7       	brne	.-12     	; 0x116 <uartinit1+0x6>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	72 e1       	ldi	r23, 0x12	; 18
 126:	8a e7       	ldi	r24, 0x7A	; 122
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__udivmodsi4>
 12e:	c9 01       	movw	r24, r18
 130:	da 01       	movw	r26, r20
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
	UBRR1L=baudrate;
 138:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H=baudrate >> 8;
 13c:	89 2f       	mov	r24, r25
 13e:	9a 2f       	mov	r25, r26
 140:	ab 2f       	mov	r26, r27
 142:	bb 27       	eor	r27, r27
 144:	80 93 cd 00 	sts	0x00CD, r24

	//Sender, Empfänger aktivieren
	UCSR1B |= (1 << TXEN);	//Sender aktivieren
 148:	e9 ec       	ldi	r30, 0xC9	; 201
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	80 83       	st	Z, r24
	UCSR1B |= (1 << RXEN);	//Empfänger aktivieren
 152:	80 81       	ld	r24, Z
 154:	80 61       	ori	r24, 0x10	; 16
 156:	80 83       	st	Z, r24
}
 158:	08 95       	ret

0000015a <putChar0>:

void putChar0(unsigned char data)
{
 15a:	98 2f       	mov	r25, r24
	//warte solange Datenpuffer nicht Leer(Uart ist beschäftigt)
	while( !(UCSR0A & (1 << UDRE)) );
 15c:	80 91 c0 00 	lds	r24, 0x00C0
 160:	85 ff       	sbrs	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <putChar0+0x2>

	//Uart Bereit (Datenpuffer leer)
	UDR0=data;
 164:	90 93 c6 00 	sts	0x00C6, r25
}
 168:	08 95       	ret

0000016a <getChar0>:
}*/

unsigned char getChar0()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR0A & (1 << RXC)) );
 16a:	80 91 c0 00 	lds	r24, 0x00C0
 16e:	87 ff       	sbrs	r24, 7
 170:	fc cf       	rjmp	.-8      	; 0x16a <getChar0>

	return UDR0;
 172:	80 91 c6 00 	lds	r24, 0x00C6
}
 176:	08 95       	ret

00000178 <getChar1>:

unsigned char getChar1()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR1A & (1 << RXC)) );
 178:	80 91 c8 00 	lds	r24, 0x00C8
 17c:	87 ff       	sbrs	r24, 7
 17e:	fc cf       	rjmp	.-8      	; 0x178 <getChar1>

	return UDR1;
 180:	80 91 ce 00 	lds	r24, 0x00CE
}
 184:	08 95       	ret

00000186 <putString0>:
	return UDR0;
}
*/

void putString0(char  str[])
{
 186:	fc 01       	movw	r30, r24
 188:	07 c0       	rjmp	.+14     	; 0x198 <putString0+0x12>
}

void putChar0(unsigned char data)
{
	//warte solange Datenpuffer nicht Leer(Uart ist beschäftigt)
	while( !(UCSR0A & (1 << UDRE)) );
 18a:	80 91 c0 00 	lds	r24, 0x00C0
 18e:	85 ff       	sbrs	r24, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <putString0+0x4>

	//Uart Bereit (Datenpuffer leer)
	UDR0=data;
 192:	90 93 c6 00 	sts	0x00C6, r25
 196:	31 96       	adiw	r30, 0x01	; 1

void putString0(char  str[])
{

	int i=0;
	while(str[i])
 198:	90 81       	ld	r25, Z
 19a:	99 23       	and	r25, r25
 19c:	b1 f7       	brne	.-20     	; 0x18a <putString0+0x4>
		putChar0(str[i++]);
}
 19e:	08 95       	ret

000001a0 <pwm_initTimer3>:
}


void pwm_initTimer3()
{
	DDRE |= ( 1 << PE3 );	//E3 = OC3A Timer3 pwm cahnnel A
 1a0:	6b 9a       	sbi	0x0d, 3	; 13
	DDRE |= ( 1 << PE4 );	//E4 = OC3B Timer3 pwm cahnnel B
 1a2:	6c 9a       	sbi	0x0d, 4	; 13

	TCCR3A = 0b10101010;	//Channel A, B PWM mod ?
 1a4:	8a ea       	ldi	r24, 0xAA	; 170
 1a6:	80 93 90 00 	sts	0x0090, r24

	TCCR3B = 0b00011011;  	//Perescaller 64
 1aa:	8b e1       	ldi	r24, 0x1B	; 27
 1ac:	80 93 91 00 	sts	0x0091, r24

	//zero position of the Servo 1
	OCR3AH	= ZeroMotorPositionH;
 1b0:	10 92 99 00 	sts	0x0099, r1
	OCR3AL	= ZeroMotorPositionL;
 1b4:	8d ea       	ldi	r24, 0xAD	; 173
 1b6:	80 93 98 00 	sts	0x0098, r24
	//zero position of the Servo 2
	OCR3BH	= ZeroMotorPositionH;
 1ba:	10 92 9b 00 	sts	0x009B, r1
	OCR3BL	= ZeroMotorPositionL;
 1be:	80 93 9a 00 	sts	0x009A, r24

	//just to generate the time period
	ICR3=2550;//1175;//0x0398;
 1c2:	86 ef       	ldi	r24, 0xF6	; 246
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	90 93 97 00 	sts	0x0097, r25
 1ca:	80 93 96 00 	sts	0x0096, r24
}
 1ce:	08 95       	ret

000001d0 <pwm_initTimer1>:

void pwm_initTimer1()
{
	DDRB |= ( 1 << PB5 );	//B5 = OC1A Timer1 pwm cahnnel A
 1d0:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= ( 1 << PB6 );	//B6 = OC1B Timer1 pwm cahnnel B
 1d2:	26 9a       	sbi	0x04, 6	; 4

	TCCR1A = 0b10101010;	//Channel A, B PWM mod ?
 1d4:	8a ea       	ldi	r24, 0xAA	; 170
 1d6:	80 93 80 00 	sts	0x0080, r24

	TCCR1B = 0b00011011;  	//Perescaller 64
 1da:	8b e1       	ldi	r24, 0x1B	; 27
 1dc:	80 93 81 00 	sts	0x0081, r24

	//zero position of the Servo 1
	OCR1AH	= ZeroServoPositionH;
 1e0:	10 92 89 00 	sts	0x0089, r1
	OCR1AL	= ZeroServoPositionL;
 1e4:	80 e4       	ldi	r24, 0x40	; 64
 1e6:	80 93 88 00 	sts	0x0088, r24
	//zero position of the Servo 2
	OCR1BH	= ZeroServoPositionH;
 1ea:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL	= ZeroServoPositionL;
 1ee:	80 93 8a 00 	sts	0x008A, r24

	//just to generate the time period
	ICR1=2550;//1175;//0x0398;
 1f2:	86 ef       	ldi	r24, 0xF6	; 246
 1f4:	99 e0       	ldi	r25, 0x09	; 9
 1f6:	90 93 87 00 	sts	0x0087, r25
 1fa:	80 93 86 00 	sts	0x0086, r24
}
 1fe:	08 95       	ret

00000200 <main>:
void pwm_initTimer1();
void pwm_initTimer3();

int main()
{
	DDRA=0xff;//only for test purposes, This is 8 LEDs
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	81 b9       	out	0x01, r24	; 1
	uartinit0(9600);
 204:	60 e8       	ldi	r22, 0x80	; 128
 206:	75 e2       	ldi	r23, 0x25	; 37
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 63 00 	call	0xc6	; 0xc6 <uartinit0>
	pwm_initTimer1();
 210:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <pwm_initTimer1>
	pwm_initTimer3();
 214:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <pwm_initTimer3>
		{
			//Motor right Control
			if(byte3==2)
			{
				//drive backward
				OCR3B	= ZeroMotorPosition-byte4;
 218:	6d ea       	ldi	r22, 0xAD	; 173
 21a:	70 e0       	ldi	r23, 0x00	; 0
}*/

unsigned char getChar0()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR0A & (1 << RXC)) );
 21c:	80 91 c0 00 	lds	r24, 0x00C0
 220:	87 ff       	sbrs	r24, 7
 222:	fc cf       	rjmp	.-8      	; 0x21c <main+0x1c>

	return UDR0;
 224:	20 91 c6 00 	lds	r18, 0x00C6
}*/

unsigned char getChar0()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR0A & (1 << RXC)) );
 228:	80 91 c0 00 	lds	r24, 0x00C0
 22c:	87 ff       	sbrs	r24, 7
 22e:	fc cf       	rjmp	.-8      	; 0x228 <main+0x28>

	return UDR0;
 230:	90 91 c6 00 	lds	r25, 0x00C6
}*/

unsigned char getChar0()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR0A & (1 << RXC)) );
 234:	80 91 c0 00 	lds	r24, 0x00C0
 238:	87 ff       	sbrs	r24, 7
 23a:	fc cf       	rjmp	.-8      	; 0x234 <main+0x34>

	return UDR0;
 23c:	40 91 c6 00 	lds	r20, 0x00C6
}*/

unsigned char getChar0()
{
	//warte solange Datenpuffer Leer
	while( !(UCSR0A & (1 << RXC)) );
 240:	80 91 c0 00 	lds	r24, 0x00C0
 244:	87 ff       	sbrs	r24, 7
 246:	fc cf       	rjmp	.-8      	; 0x240 <main+0x40>

	return UDR0;
 248:	30 91 c6 00 	lds	r19, 0x00C6
	{
	    byte1=getChar0();
		byte2=getChar0();
		byte3=getChar0();
		byte4=getChar0();
		PORTA=byte2;
 24c:	92 b9       	out	0x02, r25	; 2

		if(byte1 ==0)
 24e:	22 23       	and	r18, r18
 250:	49 f4       	brne	.+18     	; 0x264 <main+0x64>
		{
			//Servo1 Control
			//add new value to the zero position of the Servo 1
			OCR1A	= ZeroServoPosition+byte2;
 252:	89 2f       	mov	r24, r25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	80 5c       	subi	r24, 0xC0	; 192
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	90 93 89 00 	sts	0x0089, r25
 25e:	80 93 88 00 	sts	0x0088, r24
 262:	11 c0       	rjmp	.+34     	; 0x286 <main+0x86>
		}
		else
		{
			//Motor left Control
			if(byte1==2)
 264:	22 30       	cpi	r18, 0x02	; 2
 266:	29 f4       	brne	.+10     	; 0x272 <main+0x72>
			{
				//drive backward
				OCR3A	= ZeroMotorPosition-byte2;
 268:	fb 01       	movw	r30, r22
 26a:	e9 1b       	sub	r30, r25
 26c:	f1 09       	sbc	r31, r1
 26e:	cf 01       	movw	r24, r30
 270:	06 c0       	rjmp	.+12     	; 0x27e <main+0x7e>
			}
			else if(byte1==1)
 272:	21 30       	cpi	r18, 0x01	; 1
 274:	41 f4       	brne	.+16     	; 0x286 <main+0x86>
			{
				//drive forward
				OCR3A	= ZeroMotorPosition+byte2;
 276:	89 2f       	mov	r24, r25
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	83 55       	subi	r24, 0x53	; 83
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	90 93 99 00 	sts	0x0099, r25
 282:	80 93 98 00 	sts	0x0098, r24
			}
		}

		if(byte3==0)
 286:	44 23       	and	r20, r20
 288:	49 f4       	brne	.+18     	; 0x29c <main+0x9c>
		{
			//Servo2 Control
			//add new value to the zero position of the Servo 2
			OCR1B	= ZeroServoPosition+byte4;
 28a:	83 2f       	mov	r24, r19
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 5c       	subi	r24, 0xC0	; 192
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	90 93 8b 00 	sts	0x008B, r25
 296:	80 93 8a 00 	sts	0x008A, r24
 29a:	c0 cf       	rjmp	.-128    	; 0x21c <main+0x1c>
		}
		else
		{
			//Motor right Control
			if(byte3==2)
 29c:	42 30       	cpi	r20, 0x02	; 2
 29e:	21 f4       	brne	.+8      	; 0x2a8 <main+0xa8>
			{
				//drive backward
				OCR3B	= ZeroMotorPosition-byte4;
 2a0:	cb 01       	movw	r24, r22
 2a2:	83 1b       	sub	r24, r19
 2a4:	91 09       	sbc	r25, r1
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <main+0xb6>
			}
			else if(byte3==1)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <main+0xae>
 2ac:	b7 cf       	rjmp	.-146    	; 0x21c <main+0x1c>
			{
				//drive forward
				OCR3B	= ZeroMotorPosition+byte4;
 2ae:	83 2f       	mov	r24, r19
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	83 55       	subi	r24, 0x53	; 83
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	90 93 9b 00 	sts	0x009B, r25
 2ba:	80 93 9a 00 	sts	0x009A, r24
 2be:	ae cf       	rjmp	.-164    	; 0x21c <main+0x1c>

000002c0 <__udivmodsi4>:
 2c0:	a1 e2       	ldi	r26, 0x21	; 33
 2c2:	1a 2e       	mov	r1, r26
 2c4:	aa 1b       	sub	r26, r26
 2c6:	bb 1b       	sub	r27, r27
 2c8:	fd 01       	movw	r30, r26
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <__udivmodsi4_ep>

000002cc <__udivmodsi4_loop>:
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	ee 1f       	adc	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	a2 17       	cp	r26, r18
 2d6:	b3 07       	cpc	r27, r19
 2d8:	e4 07       	cpc	r30, r20
 2da:	f5 07       	cpc	r31, r21
 2dc:	20 f0       	brcs	.+8      	; 0x2e6 <__udivmodsi4_ep>
 2de:	a2 1b       	sub	r26, r18
 2e0:	b3 0b       	sbc	r27, r19
 2e2:	e4 0b       	sbc	r30, r20
 2e4:	f5 0b       	sbc	r31, r21

000002e6 <__udivmodsi4_ep>:
 2e6:	66 1f       	adc	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	88 1f       	adc	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	1a 94       	dec	r1
 2f0:	69 f7       	brne	.-38     	; 0x2cc <__udivmodsi4_loop>
 2f2:	60 95       	com	r22
 2f4:	70 95       	com	r23
 2f6:	80 95       	com	r24
 2f8:	90 95       	com	r25
 2fa:	9b 01       	movw	r18, r22
 2fc:	ac 01       	movw	r20, r24
 2fe:	bd 01       	movw	r22, r26
 300:	cf 01       	movw	r24, r30
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
